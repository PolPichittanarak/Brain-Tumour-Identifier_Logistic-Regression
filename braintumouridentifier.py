# -*- coding: utf-8 -*-
"""BrainTumourIdentifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zI1OU2MSZVROC6C4_43eb_rTL324_X5_
"""

from google.colab import drive
drive.mount("/content/drive")

cd /content/drive/MyDrive/Logistic_Regression/MRI_images

import os

from PIL import Image as PilImage
from IPython.display import display
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

import warnings
warnings.filterwarnings('ignore')
from sklearn.exceptions import ConvergenceWarning
warnings.filterwarnings("ignore", category = ConvergenceWarning, module = "sklearn")

Image_data = []
Images = []
Label = []

for filename in os.scandir("Training/glioma"):
  if filename.is_file():
    img = PilImage.open(filename.path)
    Images.append(img)
    img = img.resize(size= (32,32))
    img = img.convert("L")
    Image_data.append(np.array(img).flatten())
    Label.append(0)

for filename in os.scandir("Training/meningioma"):
  if filename.is_file():
    img = PilImage.open(filename.path)
    Images.append(img)
    img = img.resize(size= (32,32))
    img = img.convert("L")
    Image_data.append(np.array(img).flatten())
    Label.append(1)

for filename in os.scandir("Training/notumor"):
  if filename.is_file():
    img = PilImage.open(filename.path)
    Images.append(img)
    img = img.resize(size= (32,32))
    img = img.convert("L")
    Image_data.append(np.array(img).flatten())
    Label.append(2)

for filename in os.scandir("Training/pituitary"):
  if filename.is_file():
    img = PilImage.open(filename.path)
    Images.append(img)
    img = img.resize(size= (32,32))
    img = img.convert("L")
    Image_data.append(np.array(img).flatten())
    Label.append(3)

Test_images_data = []
Test_images = []
Test_label = []

for filename in os.scandir("Testing/glioma"):
  if filename.is_file():
    img = PilImage.open(filename.path)
    Test_images.append(img)
    img = img.resize(size= (32,32))
    img = img.convert("L")
    Test_images_data.append(np.array(img).flatten())
    Test_label.append(0)

for filename in os.scandir("Testing/meningioma"):
  if filename.is_file():
    img = PilImage.open(filename.path)
    Test_images.append(img)
    img = img.resize(size= (32,32))
    img = img.convert("L")
    Test_images_data.append(np.array(img).flatten())
    Test_label.append(1)

for filename in os.scandir("Testing/notumor"):
  if filename.is_file():
    img = PilImage.open(filename.path)
    Test_images.append(img)
    img = img.resize(size= (32,32))
    img = img.convert("L")
    Test_images_data.append(np.array(img).flatten())
    Test_label.append(2)

for filename in os.scandir("Testing/pituitary"):
  if filename.is_file():
    img = PilImage.open(filename.path)
    Test_images.append(img)
    img = img.resize(size= (32,32))
    img = img.convert("L")
    Test_images_data.append(np.array(img).flatten())
    Test_label.append(3)

def unique(list1):
  unique_list = []

  for x in list1:
    if x not in unique_list:
      unique_list.append(x)
  return unique_list

unique_label = unique(Label)

print("Number of images: ", len(Image_data))
print("Total labels: ", unique_label)

image_num = 5000

pic1 = np.reshape(Image_data[image_num], (32, 32))
plt.imshow(pic1, cmap = "gray")

if Label[image_num] == 0:
  print("Patient has Glioma tumor")
elif Label[image_num] == 1:
  print("Patient has Meningioma tumor")
elif Label[image_num] == 2:
  print("Patient has no tumor")
elif Label[image_num] == 3:
  print("Patient has Pituitary tumor")

image = Images[image_num]
print("Size of original image:", image.size)
image = image.resize(size = (240, 240))
print("Size of resized image:", image.size)
display(image)

if Label[image_num] == 0:
  print("Patient has Glioma tumor")
elif Label[image_num] == 1:
  print("Patient has Meningioma tumor")
elif Label[image_num] == 2:
  print("Patient has no tumor")
elif Label[image_num] == 3:
  print("Patient has Pituitary tumor")

print("Data type")
print(type(Image_data))
print(type(Label))

X_data = np.array(Image_data)
Y_data = np.array(Label)

print("Data type")
print(type(X_data))
print(type(Y_data))

X_train, X_val, Y_train, Y_val = train_test_split(X_data, Y_data, test_size = 0.95)
print(f"Shape of X train: {X_train.shape} \nShape of Y train: {Y_train.shape}")
print(f"Shape of X Val: {X_val.shape} \nShape of Y val: {Y_val.shape}")

log_reg_model = LogisticRegression(solver = "newton-cg",multi_class = "multinomial", max_iter = 100)
log_reg_model.fit(X_train, Y_train)
print("Training Accuracy: ", log_reg_model.score(X_train, Y_train))

y_pred = log_reg_model.predict